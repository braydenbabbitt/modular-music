import {
  Avatar,
  Button,
  Center,
  Divider,
  Group,
  Loader,
  Modal,
  NumberInput,
  SegmentedControl,
  Select,
  Stack,
  Text,
  useMantineTheme,
} from '@mantine/core';
import { useForm } from '@mantine/form';
import { IconPlaylist, IconPlus } from '@tabler/icons';
import { useTypedJSONEncoding } from 'den-ui';
import { ComponentPropsWithoutRef, forwardRef, ReactElement, useState } from 'react';
import { QueryObserverResult } from 'react-query';
import { InfoHoverButton } from '../../../../components/buttons/info-hover-button.component';
import { FetchedModuleOutput, saveModuleOutput } from '../../../../services/supabase/modules/modules.api';
import { SelectCreatePlaylist } from '../select-create-playlist.component';
import { useAuth } from '../../../../services/auth/auth.provider';

type OutputSelectorModalProps = {
  open: boolean;
  moduleId: string;
  onSave: () => void;
  onClose: () => void;
  initOutput?: FetchedModuleOutput;
  userPlaylists: any[];
  refetchUserPlaylists: () => Promise<QueryObserverResult<any[], unknown>>;
};

enum OutputWriteBehaviors {
  OVERWRITE = 'OVERWRITE',
  APPEND = 'APPEND',
  INSERT = 'INSERT',
}

type OutputFormTypes = {
  output: string | undefined;
  limit: number | undefined;
  writeBehavior: OutputWriteBehaviors;
};

export const OutputSelectorModal = ({
  open,
  moduleId,
  onSave,
  onClose,
  initOutput,
  userPlaylists,
  refetchUserPlaylists,
}: OutputSelectorModalProps) => {
  const mantineTheme = useMantineTheme();
  const { supabaseClient } = useAuth();
  const [showLoader, setShowLoader] = useState(false);
  const { stringifyTypedJSON: stringifyObject, parseTypedJSON: parseObject } =
    useTypedJSONEncoding<Record<string, any>>();
  const form = useForm<OutputFormTypes>({
    initialValues: {
      output: stringifyObject(userPlaylists.find((playlist) => playlist.id === initOutput?.playlist_id)),
      limit: initOutput?.limit,
      writeBehavior:
        initOutput?.append === null || initOutput?.append === undefined
          ? OutputWriteBehaviors.OVERWRITE
          : initOutput?.append
          ? OutputWriteBehaviors.APPEND
          : OutputWriteBehaviors.INSERT,
    },
  });

  return (
    <Modal opened={open} onClose={onClose} centered title='Select Output'>
      {userPlaylists && !showLoader ? (
        <Stack>
          <Select
            {...form.getInputProps('output')}
            placeholder='Select a playlist'
            label={<Text weight='normal'>Select a playlist</Text>}
            data={[
              { label: 'Create new playlist', value: 'create', defaultIcon: <IconPlus /> },
              ...userPlaylists.map((playlist) => {
                return {
                  image: playlist.images[0]?.url ?? 'playlist-icon@512.png',
                  label: playlist.name,
                  value: stringifyObject(playlist) ?? '',
                };
              }),
            ]}
            itemComponent={CustomSelectItem}
            nothingFound='No playlist found'
            searchable
            allowDeselect
            filter={(value, item) => {
              if (value.length === 0) {
                return true;
              }
              return item.label?.toLowerCase().includes(value.toLowerCase().trim()) ?? false;
            }}
          />
          <NumberInput
            {...form.getInputProps('limit')}
            placeholder='Amount of tracks to save'
            label={<Text weight='normal'>Amount of tracks to save</Text>}
            hideControls
          />
          <Group spacing='xs' align='center'>
            <Text>Writing Behavior</Text>
            <InfoHoverButton size={20}>
              <Stack spacing='xs'>
                <Text size='sm'>
                  <span css={{ fontWeight: 'bold' }}>Overwrite:</span> Replace all songs in the playlist with the songs
                  generated by the module.
                </Text>
                <Text size='sm'>
                  <span css={{ fontWeight: 'bold' }}>Append:</span> Add the songs generated by the module to the end of
                  the playlist.
                </Text>
                <Text size='sm'>
                  <span css={{ fontWeight: 'bold' }}>Insert:</span> Add the songs generated by the module to the
                  beginning of the playlist.
                </Text>
              </Stack>
            </InfoHoverButton>
          </Group>
          <SegmentedControl
            {...form.getInputProps('writeBehavior')}
            data={[
              ...Object.values(OutputWriteBehaviors).map((type) => ({
                value: type,
                label: type.slice(0, 1) + type.slice(1).toLowerCase(),
              })),
            ]}
          />
          {/* <Group>
              <Switch
                {...form.getInputProps('append')}
                css={{
                  label: {
                    cursor: 'pointer',
                  },
                }}
                offLabel={<Text size='xs'>Off</Text>}
                onLabel={<Text size='xs'>On</Text>}
                size='lg'
              />
            </Group> */}
          {(form.values.output === 'create' && (
            <Stack my='lg' spacing='sm'>
              <Divider />
              <SelectCreatePlaylist
                onCreate={(playlistId: string) => {
                  refetchUserPlaylists().then((result) => {
                    if (result.data) {
                      form.setFieldValue('output', stringifyObject(result.data.find((item) => item.id === playlistId)));
                    }
                  });
                }}
                onCancel={() => form.setFieldValue('output', '')}
              />
            </Stack>
          )) || (
            <Group position='right'>
              <Button variant='outline' color='neutral' onClick={() => onClose()}>
                Cancel
              </Button>
              <Button
                disabled={!form.values.output || !form.values.limit}
                onClick={async () => {
                  setShowLoader(true);
                  const selectedPlaylist = parseObject(form.values.output!);

                  await saveModuleOutput({
                    supabaseClient,
                    moduleId,
                    label: selectedPlaylist!.name,
                    image_href: selectedPlaylist!.images[0].url || '',
                    playlistId: selectedPlaylist!.id,
                    playlist_href: selectedPlaylist!.href,
                    limit: form.values.limit ?? 100,
                    append:
                      form.values.writeBehavior === OutputWriteBehaviors.OVERWRITE
                        ? undefined
                        : form.values.writeBehavior === OutputWriteBehaviors.APPEND
                        ? true
                        : false,
                  });
                  setShowLoader(false);
                  onSave();
                }}
              >
                Save
              </Button>
            </Group>
          )}
        </Stack>
      ) : (
        <Center>
          <Loader />
        </Center>
      )}
    </Modal>
  );
};

interface CustomSelectItemProps extends ComponentPropsWithoutRef<'div'> {
  image?: string;
  defaultIcon?: ReactElement;
  label: string;
  onClick?: () => void;
}

const CustomSelectItem = forwardRef<HTMLDivElement, CustomSelectItemProps>(
  ({ image, label, defaultIcon, ...rest }: CustomSelectItemProps, ref) => (
    <div ref={ref} {...rest}>
      <Group noWrap>
        <Avatar src={image}>{defaultIcon || <IconPlaylist />}</Avatar>
        <Text size='sm'>{label}</Text>
      </Group>
    </div>
  ),
);
CustomSelectItem.displayName = 'User Playlist Createable Item';
